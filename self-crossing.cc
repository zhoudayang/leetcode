/*

     x(1)
    ┌───┐
x(2)│   │x(0)
    └───┼──>
    x(3)│
        
第一类是第四条边和第一条边相交的情况，需要满足的条件是第一条边大于等于第三条边，第四条边大于等于第二条边。同样适用于第五条边和第二条边相交，第六条边和第三条边相交等等，依次向后类推的情况...

 


      x(1)
    ┌──────┐
    │      │x(0)
x(2)│      ^
    │      │x(4)
    └──────│
      x(3)

第二类是第五条边和第一条边重合相交的情况，需要满足的条件是第二条边和第四条边相等，第五条边大于等于第三条边和第一条边的差值，同样适用于第六条边和第二条边重合相交的情况等等依次向后类推...

 

      x(1)
    ┌──────┐
    │      │x(0)
x(2)│     <│────│
    │       x(5)│x(4)
    └───────────│
        x(3)

第三类是第六条边和第一条边相交的情况，需要满足的条件是第四条边大于等于第二条边，第三条边大于等于第五条边，第五条边大于等于第三条边和第一条边的差值，第六条边大于等于第四条边和第二条边的差值，同样适用于第七条边和第二条边相交的情况等等依次向后类推...

*/

class Solution{
 public:
  bool isSelfCrossing(vector<int> &x){
    for(int i=3;i<x.size();++i){
      //情况1（第四条边和第一条边相交）：第四条变大于等于第2条边 且 第一条边大于等于第三条边
      if(x[i] >= x[i-2] and x[i-3] >= x[i-1])
        return true;
      //情况2（第5条边和第一条边重合）：第二条边和第四条边相等，第5条边大于等于第三条边和第一条边的差值
      if(i>=4 and x[i-1] == x[i-3] and x[i] >= x[i-2]-x[i-4])
        return true;
      //情况3（第6条边和第一条边相交）：第四条边大于等于第二条边，第3条边大于等于第5条边，第5条边大于等于第3条边和第一条边的差值，第6条边大于等于第四条边和第二条边的差值
      if(i>=5 and x[i-2] >= x[i-4] and x[i-3]>=x[i-1] and x[i-1]>=x[i-3]-x[i-5] and x[i]>=x[i-2]-x[i-4])
        return true;
    }
    return false;
  }
};
